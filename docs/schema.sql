-- Create accounts
create table
  public.accounts (
    id integer generated by default as identity,
    email text not null,
    name text not null,
    created_at timestamp with time zone not null default now(),
    constraint accounts_pkey primary key (id),
    constraint accounts_current_cart_key unique (current_cart),
    constraint accounts_email_key unique (email),
    constraint accounts_current_cart_fkey foreign key (current_cart) references carts (id) on update cascade on delete restrict
  ) tablespace pg_default;

-- Create transactions
create table
  public.transactions (
    id integer generated by default as identity,
    description text null,
    created_at timestamp with time zone not null default now(),
    constraint transactions_pkey primary key (id)
  ) tablespace pg_default;

-- Create games
create table
  public.games (
    id integer generated by default as identity,
    item_sku text not null,
    name text not null,
    publisher not text null,
    price_in_dollars integer not null,
    platform text not null,
    genre text null,
    family_rating text not null,
    release_date date not null,
    created_at timestamp with time zone not null default now(),
    constraint games_pkey primary key (id),
    constraint games_item_sku_key unique (item_sku)
  ) tablespace pg_default;

-- Create carts
create table
  public.carts (
    id integer generated by default as identity,
    account_id integer not null,
    checked_out boolean not null default false,
    created_at timestamp with time zone not null default now(),
    constraint carts_pkey primary key (id),
    constraint public_carts_customer_id_fkey foreign key (account_id) references accounts (id) on update restrict on delete restrict
  ) tablespace pg_default;

-- Create cart_items
create table
  public.cart_items (
    cart_id integer not null,
    game_id integer not null,
    cost integer null default 0,
    created_at timestamp with time zone not null default now(),
    constraint cart_items_pkey primary key (cart_id, game_id),
    constraint cart_items_cart_id_fkey foreign key (cart_id) references carts (id) on update cascade on delete restrict,
    constraint cart_items_game_id_fkey foreign key (game_id) references games (id) on update cascade on delete restrict
  ) tablespace pg_default;

-- Create purchases
create table
  public.purchases (
    account_id integer not null,
    game_id integer not null,
    transaction_id integer null,
    money_given integer null,
    created_at timestamp with time zone not null default now(),
    constraint purchases_pkey primary key (account_id, game_id),
    constraint purchases_account_id_fkey foreign key (account_id) references accounts (id) on update cascade on delete restrict,
    constraint purchases_game_id_fkey foreign key (game_id) references games (id) on update cascade on delete restrict,
    constraint public_purchases_transaction_id_fkey foreign key (transaction_id) references transactions (id) on update restrict on delete cascade
  ) tablespace pg_default;

-- Create reviews
create table
  public.reviews (
    account_id integer not null,
    game_id integer not null,
    review integer null,
    created_at timestamp with time zone not null default now(),
    constraint reviews_pkey primary key (account_id, game_id),
    constraint reviews_account_id_fkey foreign key (account_id) references accounts (id) on update cascade on delete restrict,
    constraint reviews_game_id_fkey foreign key (game_id) references games (id) on update cascade on delete restrict
  ) tablespace pg_default;

-- Create wishlisted
create table
  public.wishlisted (
    account_id integer not null,
    game_id integer not null,
    created_at timestamp with time zone not null default now(),
    constraint wishlisted_pkey primary key (account_id, game_id),
    constraint wishlisted_account_id_fkey foreign key (account_id) references accounts (id) on update cascade on delete restrict,
    constraint wishlisted_game_id_fkey foreign key (game_id) references games (id) on update cascade on delete restrict
  ) tablespace pg_default;

create view public.total_inventory_view as
select
  (select COUNT(*) from games) as total_games,
  (select COUNT(*) from purchases) as total_purchases,
  (select coalesce(sum(price_in_dollars), 0) 
    from purchases
    join games
    on games.id = purchases.game_id) as money;

create view 
  public.avg_review_view as
select
  reviews.game_id,
  round((sum(reviews.review) / count(*))::numeric, 0) as review
from
  reviews
group by
  reviews.game_id;

create view
  public.game_catalog as
select
  games.item_sku,
  games.name,
  games.publisher,
  games.price_in_cents,
  games.genre,
  games.platform,
  games.family_rating,
  coalesce(avg_review.review, '-1'::integer::numeric) as review,
  games.release_date
from
  games
  left join avg_review_view avg_review on games.id = avg_review.game_id;

create view
  public.cart_values_view as
select
  cart_items.cart_id,
  count(*) as total_games,
  coalesce(sum(games.price_in_cents), 0::bigint) as total_cost,
  carts.checked_out
from
  carts
  join cart_items on carts.id = cart_items.cart_id
  join games on cart_items.game_id = games.id
group by
  cart_items.cart_id,
  carts.checked_out
order by
  cart_items.cart_id;


create table
  public.game_ratings (
    rating text not null,
    min_age integer not null default 0,
    created_at timestamp with time zone not null default now(),
    constraint game_ratings_pkey primary key (rating)
  ) tablespace pg_default;

insert into game_ratings (rating, min_age)
values
  ('E', 0),
  ('E10', 10),
  ('T', 13),
  ('M', 17),
  ('A0', 18);